#!/usr/bin/env ruby

require 'getoptlong'

$doc = <<ENDDOC
SYNOPSIS
startup_application [options]

DESCRIPTION
startup_application is used to start the appliction.  This
script starts mongrel_rails, unpack_daemon and backgroundrb.

OPTIONS

  -h, --help
  Print this help and exit.

  -c, --command [start, stop, restart]
  start, stop or restart mongrel_rails, unpack_daemon and
  backgroundrb applications.

  -e, --environment [production, development]
  Choose which environment you want to run your applications in.

  -p, --port [port number]
  mongrel_rails
  Choose which port you want mongrel_rails to run on.

  -a, --autopoke [seconds]
  unpack_daemon
  Check the database for new tarballs automatically.
  If no argument is supplied the default is every 300 seconds.

  -m, --mark [seconds]
  unpack_daemon
  Mark the log file periodically.
  If no argument is supplied the default is every 1200 seconds.
  
ENDDOC

def usage
  puts $doc
end

opts = GetoptLong.new([ '--help',   '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--command',   '-c', GetoptLong::REQUIRED_ARGUMENT ],
                      [ '--environment','-e', GetoptLong::REQUIRED_ARGUMENT ],
                      [ '--autopoke','-a', GetoptLong::REQUIRED_ARGUMENT ],
                      [ '--port','-p', GetoptLong::REQUIRED_ARGUMENT ],
                      [ '--mark','-m', GetoptLong::REQUIRED_ARGUMENT ])

@command  = 'start'
@env      = nil
@autopoke = 300
@mark     = 1200
@port     = 3000

opts.quiet = true

opts.each do | opt, arg |
  case opt
  when '-h', '--help'
    usage
    exit
  when '-a', '--autopoke'
    if arg == ''
      @autopoke = 300  # default is 5 min
    else
      begin
        @autopoke = Integer(arg)
      rescue ArgumentError
        puts arg
        puts 'Not a valid poke delay.'
        usage
        exit
      end
    end   
  when '-m', '--mark'
    if arg == ''
      @mark = 1200  # default is 20 min   
    else  
      begin
        @mark = Integer(arg)
      rescue ArgumentError
        puts 'Not a valid mark delay.'
        usage
        exit
      end
    end
  when '-p', '--port'
    if arg == ''
      @port = 3000
    else
      begin
        @port = Integer(arg)
      rescue ArgumentError
        puts 'Not a valid port.'
        usage
        exit
      end
    end
  when '-c', '--command'
    if arg == 'start' || arg == 'stop'
      @command = arg
    else
      @command = 'stop'
    end
  when '-e', '--environment'
    if arg == 'production' || arg == 'development'
      @env = arg
    else
      puts "Invalid environment '#{arg}' specified"
      usage
      exit
    end
  end
end

ENV["RAILS_ENV"]=@env

Dir.mkdir("./tmp") unless File.directory? "./tmp"
Dir.mkdir("./tmp/pids") unless File.directory? "./tmp/pids"
Dir.mkdir("./tmp/pids/#{@env}") unless File.directory? "./tmp/pids/#{@env}"
@current_dir = Dir.pwd

# Starting/Stopping mongrel_rails
@location = "./tmp/pids/#{@env}/mongrel.pid"
puts "Mongrel_Rails ...."
if @command == 'start'
  txt = %x[mongrel_rails #{@command} --pid #{@location} --log ./log/mongrel_#{@env}.log -e #{@env} -c #{@current_dir} -p #{@port} -d]
else
  txt = %x[mongrel_rails #{@command} --pid #{@location}]
end
puts txt unless txt == ''

# Starting/Stopping unpack_daemon
Dir.chdir("./script")
puts "UnpackDaemon ...."
txt = %x[./run_unpack_daemon -a #{@autopoke} -m #{@mark} -e #{@env} -c #{@command}]
puts txt unless txt == ''
Dir.chdir("..")

# Starting/Stopping backgroundrb
puts "BackgrounDRB ...."
txt = %x[./script/backgroundrb #{@command} -e #{@env}]
puts txt unless txt == ''

