#!/usr/bin/env Rscript
###
### This R script makes g4profiling standard plots assuming make_dataframes.rscript was run
###
### Syntax:  make_standard_plots.rscript campaign-directory
###

library(lattice)
library(stringr)
suppressPackageStartupMessages(library(doBy))
suppressPackageStartupMessages(library(Hmisc))

args <- commandArgs(TRUE)
if (length(args) != 2) stop("You must supply the name of a directory to process")

##myBigFunction<-function(thedir) {
dirname <- args[[1]]
NUMBER_OF_EVENTS <- as.numeric(args[[2]])
#dirname <- getwd()

suppressPackageStartupMessages(source("analysis/src/plots.R"))

load(file.path(dirname,"trials.rda"))
load(file.path(dirname,"events.rda"))
#load(file.path(dirname,"runmeta.rda"))
#load(file.path(dirname,"runenvs.rda"))
load(file.path(dirname,"libraries.rda"))
load(file.path(dirname,"functions.rda"))

generate.png <- function(plot, filename) {
  png(filename,width = 1400, height = 400, units = "px")
  print(plot)
  dev.off()
}

generate.html <- function(dframe, filename) {
  a<-html(dframe,file=filename,dcolumn=TRUE)
  format(dframe,digits=5,scientific=TRUE)	
  # last arg is passed to format.df; see its handling of $ signs etc...
}

basic.trial.times.df <-function( nevents = NUMBER_OF_EVENTS , ...) {
  mcpu <- aggregate(  trial.t/nevents~mname, data = trials, FUN = mean )
  names(mcpu)<- c("Machine Name","Mean CPU Time per Event")
  ecpu <- aggregate(  trial.t/nevents~mname, data = trials, FUN = sd )
  names(ecpu)<- c("Machine Name","Standard Deviation")
  acpu <-merge(mcpu,ecpu)	  
  format(acpu,digits=5,scientific=TRUE)	
#  print(acpu)
}

big.functions.count.df <- function( minfrac = 0.01, ...)  {
  bigfuncs <- subset(functions, max.leaf.frac.median > minfrac)
  afv<-summaryBy(leaf~short+mname, data=bigfuncs, FUN=fivenum)
  names(afv) <- c("short", "mname",
                  "leaf.lw", "leaf.lh", "leaf.median", "leaf.uh", "leaf.uw"
                  )
  afm<-summaryBy(max.leaf.median~short+mname, data=bigfuncs,FUN=median)
  names(afm) <- c("short", "mname", "max.leaf.median")
  bigfuncsf <- merge(afm,afv)
  orderBy(~-max.leaf.median,data=bigfuncsf)  
}

big.functions.frac.df <- function( minfrac = 0.01, ...)  {
  bigfuncs <- subset(functions, max.leaf.frac.median > minfrac)
  afv<-summaryBy(leaf.frac~short+mname, data=bigfuncs, FUN=fivenum)
  names(afv) <- c("short", "mname",
                  "leaf.frac.lw", "leaf.frac.lh", "leaf.frac.median", "leaf.frac.uh", "leaf.frac.uw"
                  )
  afm<-summaryBy(max.leaf.frac.median~short+mname, data=bigfuncs,FUN=median)
  names(afm) <- c("short", "mname", "max.leaf.frac.median")
  bigfuncsf <- merge(afm,afv)
  orderBy(~-max.leaf.frac.median,data=bigfuncsf)  
}

big.libraries.count.df <- function( minmed = 10, ...)  {
  biglibs <- subset(libraries, max.samples.median > minmed)
  alv<-summaryBy(samples~lib+mname, data=biglibs, FUN=fivenum)
  names(alv) <- c("lib", "mname",
                  "samples.lw", "samples.lh", "samples.median", "samples.uh", "samples.uw"
                  )
  alm<-summaryBy(max.samples.median~lib+mname, data=biglibs,FUN=median)
  names(alm) <- c("lib", "mname", "max.samples.median")
  biglibsf <- merge(alm,alv)
  orderBy(~-max.samples.median,data=biglibsf)  
}

#print(sprintf("%s created test",fname))

# par(ask=TRUE)

#all.events.plot()

fname=file.path(dirname,"prof_basic_trial_times_list.html")
generate.html(basic.trial.times.df( nevents = NUMBER_OF_EVENTS ),fname)
print(sprintf("%s created",fname))

##}

## This tells emacs to view this file in R mode.
## Local Variables:
## mode:R
## End:

